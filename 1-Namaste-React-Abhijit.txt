Episode 1 :
VS Code is used EMMET - What is this is generate some code for you in VS code 
If we write html:5 it generate the basic html for you 

1. We see how we can create the basic hello world program using the html (created index.html file and in h1 tag added the text)
2. Here we see how we can create the basic hello world program using the Javascript  (Checkout the solution in the index.html file)
3. Now how we can create the basic hello world program using the React 
4. To inject the react into our project we use the CDN react (CDN - Content delivery network)
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script> -> this will inject the react 
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script> ->this will inject the reactDom we use to modify the DOM

After including this script tag then we have react inside our project now the browser will understand what is react.
-Now we have injected the react if we go to the browser and inspect it and type the react we will see the lots of things we get. (children, component, etc)
-If we write the ReactDOM in console you will see the different functions give by the react DOM.
-console.warn("This heading is a react element and we can see in the console the react element will be printed",heading) 
-if we print the heading we can see the react element and it has he props the props means 
{
    "id": "xyz",
    "children": "Hello World form React!"
}
this that we have passed as a parameter there
const heading = React.createElement("h1", {id:"xyz"}, "Hello World form React!");


EX:The below structure we have created using the react 
<div id = "parent">
       <div id = "child">
           <h1>I'm H1 Tag means heading tag</h1>
        </div>
 </div>

 const parentElement = React.createElement(
  "div",
  { id: "parent" },
  React.createElement(
    "div",
    { id: "child" },
    React.createElement("h1", {}, "I am an h1 tag")
  )
);
This is the structure 

- And the ReactElement is basically is a object ReactElement(Object) = HTML (Browser understand)
- The react element become the HTML that browser understand while rendering into the DOM it converts the react code into the DOM (EX: root.render(parentElement);)

-const parentElement = React.createElement(
  "div",
  { id: "parent" },
  React.createElement(
    "div",
    { id: "child" },
    [
      React.createElement("h1", {}, "I am an h1 tag"),
      React.createElement("h2", {}, "I am an h2 tag"),
    ] // if we want to add one more sibling to it then we need to add that in the array
  )
); 
To avoid this complex structure we have JSX
- JSX will make our life easy when we have to create the tagsÂ±


Episode 2:
-npm npm basically a package manager where all the package are there
-Now to initialize the npm in our app then we need to do the (npm init)
-It will generate the package.json file this is the basically a configuration for npm
-Why we need this package.json the package we install is also knows as the dependencies npm manage that and it will manage that in the package.json file
-npm install -D parcel we have install the parcel to bundle the packages as we can see the -D we have use there its a dev dependencies means it is required in the development env 
-When we install the parcel then we will see the new files are added package-lock.json file and node_modules
-What is difference between package.json and package-lock.json file package.json keeps track of version of packages that we install and package-lock.json keep track of exact version that is we install its will lock the exact version of the package that we install 
-If we have package.json and package-lock.json then we can regenerate the node modules that is why we don't need to push the node_modules to the git 
-We can recreate the node_modules using the command (npm install)
-"parcel": "^2.12.0" as you can see the ^ this sign it will get the minor update and if we see Â§ tild sign then it will take the major update
-(npx parcel index.html) we ignite our app using this command.
-What is npx just like npm we have npx. npx means executing our package whenever we have to execute our package we use the npx <package name>
-After igniting the app the lots of things are happened
-To inject the react into our app we use the CDN links there is another way to inject the react into our app is using npm using node package manager
-The CDN links are not good way to initialize the react app.
-Now to install the react into our app we have to use the command (npm install react) and we need to install the react DOM also (npm install react-dom)
-If we check the package.json we will see the react and react-dom is installed properly 
"dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  }
-Now we are getting an error its not able to find out from where the react is coming for because previosuly we use the CDN links now we are installing the packages 
-So we need to import the react 
-import React from "react"; we import the react so form where it is coming from its coming form node_module from react file so thats the meaning of import 
-If we change something in code we will see that change in browser automatically we dont need to reload the page this happend because we use the parcel in our app

# Parcel
-Dev Build
-Local Server
-HMR = Hot Module Replacement
-It Uses file watching algorithm - its written in C++
-Caching = Faster Build 
-Image Optimization
-Minification 
-Bundling
-Compressing
-Consistent Hashing
-Code Splitting
-Differential Bundling - supports older browsers
-Diagnostic 
-Error Handling 
-Https
-Tree Shaking - remove unused code
-Different dev and prod bundles

-If we want to do the prod build then we need to use the command like (npx parcel build index.html)
As we hit this command then we get the error
ðŸš¨ Build failed.

@parcel/namer-default: Target "main" declares an output file path of "app.js" which 
does not match the compiled bundle type "html".

  /Users/abhijit/Desktop/Namaste-React/package.json:5:11
    4 |   "description": "This is Namaste-React Abhijit",
  > 5 |   "main": "app.js",
  >   |           ^^^^^^^^ Did you mean "app.html"?
    6 |   "scripts": {
    7 |     "test": "Jest"

  ðŸ’¡ Try changing the file extension of "main" in package.json.

-so to resolve this error we need to remove the "main": "app.js", this from the package.json because its not the entry point of our application we have write there in cmd as index.html its not matching there 
npx parcel build index.html
âœ¨ Built in 839ms
dist/index.html                345 B    310ms
dist/index.d8c12c77.css         85 B     31ms
dist/index.268a7a54.js     139.24 KB    179ms

-It will build the all dist file in the dist we will see it will compresseed everything and now our code is production ready it will minify our code  
-We have browser list where we can add for which browser our app will support
(https://browserslist.dev/?q=bGFzdCAyIHZlcnNpb25z) checkout this site


Episode 3:
we can create a script to build our production ready app then we need to write the script there in the package.json
  "scripts": {
    "start": "parcel index.html",
    "test": "Jest"
  }
  This script is used to create a dev build 
  -Lets create a script for building a production
   "scripts": {
    "start": "parcel index.html",
    "build": "parcel build index.html"
    "test": "Jest"
  }
  -this script is used to build the production app
  -Now we have created the script now we don't need to write the (npx parcel index.html) to build our app.
  -Suppose if we got to the company and you don't know how to build the application then go to the package.json file and you will find the scripts there and you will see the command to run the code
  -Now to run the application so what command we need to hit 
   "scripts": {
    "start": "parcel index.html",
    "build": "parcel build index.html"
    "test": "Jest"
  }
-To run the application we need to use the command (npm run start) and if you hit the enter it will do the same things that our run cmd do 
npm run start
> namaste-react@1.0.0 start
> parcel index.html
Server running at http://localhost:1234
âœ¨ Built in 514ms

-As you can see our application is running we just need so see the package.json and look for the script and check what is written in the start section and hit (npm run <script>) your application will run successfully.
or you can do the (npm start) also it will start the application it will same as the (npm run start)
-I have created the new app1.js file 
-JSX React = const jsxHeading = <h1 id="tag">This is h1 tag using JSX ðŸš€</h1>; // This is not HTML this is JSX. JSX is different than HTML its HTML like syntax
const root = ReactDOM.createRoot(document.getElementById("root2"))
root.render(jsxHeading)
-As you can see the h1 tag we have written that is JSX
-JSX React (transpiled before it reaches the JS engine) - this is done by parcel - parcel will do this work form the babel as we save the code babel will convert the code into the react code (react understandable code).
-JSX => React.createElement => ReactElement.JS Object => HTMLElement(render)
-This is how the code will work in background
-If we want to give the class name in the JSX the we need to give like this => className="head"
-If we want to write the multiple lines the babel code then we need to write it into the () parenthesis
EX: const jsxHeading = (
  <h1 className="head" id="tag">
    This is h1 tag using JSX ðŸš€
  </h1>
); 
-React components = are the building blocks of the react application.
-There are two types of components in react 
1.Class Based Components - Old way of writing react components
2.Functional Components - New way of writing react components

-React Functional Components
EX:
//Functional components
const FunctionalComponent = () => {
    return <h1>Namaste Guys React Functional Component</h1>
};
-This is the react functional component with return the JSX code
-We will use the functional component all across the places
-To render the functional component we need to use the 
root.render(<FunctionalComponent/>); method
-<FunctionalComponent/> like this we need to add to render the functional component
-How we can write the JavaScript code inside the Function component
EX:const FunctionalComponent = () => (
    <div id="container">
        <h2>{100 + 200}</h2> // Using the {} these curly braces we can write the javascript code in the function component
        <h1>THIS IS FUNCETIONAL COMP</h1>
    <h1 className="functionComp">Namaste Guys React Functional Component</h1>
  </div>
);
-This is how we can write the Javascript in the functional component
-How we can render the component inside the component =>
EX:const Title = () => (
    <h2>This is how we can render the data in the functional comp using</h2>
);

const FunctionalComponent = () => (
  <div id="container">
    <Title /> // Here we render the component inside the component
    <h2>{}</h2> // Using the {} these curly braces we can write the
    javascript code in the function component
    <h1>THIS IS FUNCETIONAL COMP</h1>
    <h1 className="functionComp">Namaste Guys React Functional Component</h1>
  </div>
);

-Lets see the example how we can render the text or something in the functional component with example 
-<> ... </> is a React Fragment. It allows you to group multiple elements without adding an extra node to the DOM.
-If we are getting the data form the API like 
EX: const data = api.getData();
-Then we can use the {} these curly braces to render the data in the functional component
EX: const FunctionalComponent = () => (
  <div id="container">
    <Title /> // Here we render the component inside the component
    <h2>{data}</h2> // Using the {} these curly braces we can write the
    javascript code in the function component
)
-If attacker get access to run some JavaScript code in your browser what we can do this type of attack is knows as cross-site scripting (XSS)
-But JSX is so amazing it wil take care of this type of attack it prevent cross-site scripting (XSS) for you 


Episode 4 :
-Here we are building the food ordering app in React
-So what component my app have 
1.Header
-Logo
-Nav Icon
2.Body
-Search Bar
-RestaurantsContainer
3.RestaurantCard
-Image
-Name
-Cuisine
-Rating
-Order Now
4.Footer
-Copyright
-Contact Us
-links
-Address
-So in our project we have created the cards and we have hard coded it and created the multiple copies 
EX: const RestaurantCard = () => {
  return (
    <div className="res-card">
      <img
        className="res-img"
        src="https://images.pexels.com/photos/2338407/pexels-photo-2338407.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2"
      ></img>
      <h3 className="res-name">Kakke Da Paratha</h3>
      <h4>Biryani, North Indian, Asian</h4>
      <div className="details">
        <div className="rating">4.4</div>
        <div className="delivery-time">38 Min</div>
      </div>
    </div>
  );
}
-const Body = () => {
  return (
    <div className="body">
      <div className="search">Search</div>
      <div className="resto-container">
        <RestaurantCard />
        <RestaurantCard /> <RestaurantCard /> <RestaurantCard />{" "}
        <RestaurantCard /> <RestaurantCard /> <RestaurantCard />{" "}
        <RestaurantCard />
        <RestaurantCard /> <RestaurantCard /> <RestaurantCard />{" "}
        <RestaurantCard /> <RestaurantCard /> <RestaurantCard />{" "}
        <RestaurantCard />
      </div>
    </div>
  );
};
This is how we have displayed here and now we want this card is dynamic means we have to show the different data to the each card so how we can do that we can do that using the concept called as props it is a short form for the properties (properties is something which we can pass to the component)
-So what is the props the props is argument to the functional component if we want to dynamically pass the data to the functional component then we can do that using the props
EX:
const RestaurantCard = ({
  resName,
  cuisine,
  rating,
  deliveryTime,
  imageUrl,
}) => {
  return (
    <div className="res-card">
      <img className="res-img" src={imageUrl}></img>
      <h3 className="res-name">{resName}</h3>
      <h4>{cuisine}</h4>
      <div className="details">
        <div className="rating">{rating}</div>
        <div className="delivery-time">{deliveryTime}</div>
      </div>
    </div>
  );
};
-This is how we destructure the properties
it means 
const {resName, cuisine} = props
-So its props
-Lets see the Swiggy API calls there are lots of complex API call we will see if we see the swiggy API this concept is know as (config-driven-UI)
-So what is the config-driven-UI it means we can render the UI based on the config data that is coming from backend 
EX: If we see the swiggy offers there is different offers for the different location so the carosole also different for the different location so we can render the carousel based on the config data that is coming from backend location 
-It simply means we can render the UI based on the config data that is coming from  (our ui will change based on data that is coming form backend)
-So to render the data we have loop that 
EX: const Body = () => {
  return (
    <div className="body">
      <div className="search">Search</div>
      <div className="resto-container">
        {restaurantData.map((restaurant, index) => (
          <RestaurantCard
            key={index}
            resName={restaurant.resName}
            cuisine={restaurant.cuisine}
            rating={restaurant.rating}
            deliveryTime={restaurant.deliveryTime}
            imageUrl={restaurant.imageUrl}
          />
        ))}
      </div>
    </div>
  );
};
like this as you can see there is index we have added if we loop the data we need to pass some unique key 
EX: Suppose we have root element and we have child so what happen is react optimizes its render cycle so we need to uniquely represents out child because suppose a new restaurant comes in at the first place and we don't given the the id to the child then react will rerender all the cards. react does not know which card is new and which card is old so it will rerender all the cards. so to overcome this problem we have to give the unique key to the child element.
-So as you can see in the code we have given the index as a key to the child element. But react say that never use the index as a key because it is not unique. so we have to use the id of the restaurant as a key.

Episode 5:
Here we are going to learn about the react hooks .
-first we will clean our code now we have created everything in one file app.js but its hard ho maintain that file so we will create the separate file for the separate component.
-We have Header.js, Footer.js, Body.js and App.js these file we have we can create the file name with .jsx extension it dosen't matter (Header.jsx, Footer.jsx, Body.jsx, App.jsx) but it is a good practice to create the file with .jsx extension.
-If we are using the typescript then we have to create the file with .tsx extension. or ts extension
-We have created the folder utils and we keep our constants in the utils folder. and all the hard coded data we keep in the utils folder.
-So we have create the constants then i have to export it so we have 2 types of export one is named export and another is default export.
1.export default <componentName> // This is default export 
2.export const LOGO_URL = "https://i.ibb.co/0s3dJdP/logo192.png" // This is named export
-So how we can import the named export so we need to do like 
EX: import { LOGO_URL } from "./utils/constants"
-This is how we can import the named export.
-Now we will make our app dynamic by adding some features into it 
-What is hooks? => A react hook is normal javascript function but it has some special features.
-There are 3 important hooks in react
1.useState() // This is used to manage the state in the react component.
2.useEffect() // This is used to perform the side effects in the react component.
3.useContext() // This is used to share the data between the react component.
-Now we will make our app dynamic by adding some features into it 
-We will add the search bar into our app.
EX:   const [filteredData, setFilteredData] = useState(restaurantData);
-This is how we can create the state variable in the react component. this is how we use the useState hook.
-Whenever a state variable is update react re-render the component.
-Reconciliation algorithm(React Filter)
-we have res-container in that we have 7 res card and we have to filter the data based on the filter button we filter the top rated restaurants. then we got 3 cards that has top rating.
-Virtual DOM => Virtual dom is representation of the real dom. It is a javascript object that represents the real dom. It is used to optimize the performance of the react app. It is used to compare the real dom with the virtual dom and find the difference between them. It is used to update the real dom with the difference.
-So there is diff algorithm is there it will find the difference between the real dom and the virtual dom and update the real dom with the difference.


Episode 6 :
-What is Monolithic architecture => we have API , UI, Auth, DB, SMS code inside it so basically we have all the things inside it. it is not good for the scalability and maintainability.
-Monolithic architecture is a software design where an entire application is built as a single, unified codebase. All components (UI, business logic, data) are combined and tightly coupled, leading to simple development and deployment for small applications. However, it can be challenging to scale, update, and maintain because changes affect the whole system, making it less flexible for larger projects compared to modular microservices architecture.
-What is Microservices architecture => in the microservices architecture we have different services like API, UI, Auth, DB, SMS code. So we have different services for different things. It is good for the scalability and maintainability.
-Microservice architecture is a software design approach where an application is built as a collection of small, independent services, each responsible for a specific function. These services communicate with each other through well-defined APIs and can be developed, deployed, and scaled independently. This design allows for better scalability, flexibility, and easier updates or maintenance since changes to one service do not directly impact others. Microservices are often used in larger, complex applications to improve development speed and resilience but can introduce challenges in terms of network communication and overall system management.
-So now how we can fetch the data form backend so there are two approaches for this 
1. As soon as the page load then we call the api and we wait for the data to come then we load the page there 
2. As soon as the page load we just quickly render what ever is there. whatever is there we will just quickly render it 
-In react we will always go with the second approach this is the better approach as soon as api update we will update our Ui too 
-Now to use this we need to use the react hook called useeffect()
-So this useEffect takes two arguments one is the function and the second is the dependency array.
-So when that function will call that we pass as a argument to useEffect() and the second argument it is called after your component render 
-As you can see here first the body is rendered and then the useEffect() is called and then the useEffect() is called and then the body is rendered again
EX:  useEffect(() => { 
      console.log("Use effect called"); 
      }, []);
      console.log("Body component rendered");     
-So why we use useEffect() because we want to do some side effect like fetching data from the server or setting up a timer or subscribing to a channel or something like that. and it is helpful to implement the second approach 
-Then we fetch the data in the useEffect()
EX:const fetchSwiggyData = async () => {
    try {
      const response = await fetch(
        "https://www.swiggy.com/dapi/restaurants/list/v5?lat=19.07480&lng=72.88560&is-seo-homepage-enabled=true&page_type=DESKTOP_WEB_LISTING"
      );
      if (response.ok) {
        const updatedSwiggyData = await response.json();
        console.log(updatedSwiggyData); // Log the full response to inspect its structur
        // Extracting the specific data you need (cards) from the API
        const restaurants =
          updatedSwiggyData?.data?.cards[0]?.card?.card?.gridElements
            ?.infoWithStyle?.info || [];
        setSwiggyData(restaurants);
      } else {
        console.error("Error fetching data:", response.statusText);
      }
    } catch (error) {
      console.error("Fetch error:", error);
    }
  };
-So this is how we can fetch data from an API and then use that data to update the state in the useEffect() hook.
-Now if we call the api but the api is taking some time to load the data to get the data then what people used to do is they show the loader but its not good user experiance the good user experiance is to show the shimmer UI read about this its a good practice. Instead of showing the loader we have to show the shimmer UI there 
-Now lets create a shimmer UI 
-We have created the shimmer UI and we show the cards on it 
-Now we have to create a button if we hit the login button then we need to change to logout so how we can do that there
EX:
let btnName = "login";
 <button
      type="button"
      class="button button3"
      onClick={() => {
      btnName = "logout";
      console.log(btnName); 
      }}
></button>
-But here we click on the button login button and if we click that button it will change to the logout but in our UI we cant see the logout because our UI is not updated there so to update that UI we need to refresh the page so that can be done using the useState() hook
-So if we want to update it on UI we use the hook 
EX: 
 let [btnNameReact, setBtnNameReact] = useState("Login");
  <button
      type="button"
      class="button button3"
      onClick={() => {
      setBtnNameReact("Logout");
      console.log(setBtnNameReact);
    }}
  >
  {btnNameReact}
  </button>
-useState this useState is a hook and it is used to update the UI it will take two parameter first one is the initial value and second one is the function which will be called when we click on the button and then on click of the button it will update the UI and we can see the header is updated to the logout
-As soon as we click on the button it will render the whole Header component.
